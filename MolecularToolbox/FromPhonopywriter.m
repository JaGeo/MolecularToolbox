classdef FromPhonopywriter<WriterSuperclass
    %Writes files from the Phonopy-OUTPUT as input
    properties(GetAccess = 'public', SetAccess = 'private')
        %information about the temperature range
        TSTART
        TEND
        TSTEP
        
        %information about the structure
        a
        b
        c
        alphaInDegrees
        betaInDegrees
        gammaInDegrees
        NumberOfAllAtoms
        AtomTypes
        Atomnames
        NumberofAtomsperType
        
        %Coordinates
        Coord
        
        %This Object is ob the type PhonopyADPs. It can read in
        %"thermal_displacment_matrices.yaml"-files.
        ADPMatrix
        
        %This Object is of the type UcartWorker. It converts the ADPs to
        %other parametrizations.
        TransformUcart
    end
    
    methods
        
      
        function obj=FromPhonopywriter(filenamePOSCAR,filenamePhonopyAusgabe,TSTART,TEND,TSTEP) %Constructor
            obj.TSTART=TSTART;
            obj.TEND=TEND;
            obj.TSTEP=TSTEP;
           
            POSCAR1=POSCAR(filenamePOSCAR);
            obj.NumberOfAllAtoms=POSCAR1.NumberOfAllAtoms;
            obj.AtomTypes=POSCAR1.NumberofAtomTypes;
            obj.Atomnames=POSCAR1.Atomnames;
            obj.NumberofAtomsperType=POSCAR1.NumberofAtomsperType;
            obj.Coord=POSCAR1.Coord;
            ADPMatrix=PhonopyADPs(filenamePhonopyAusgabe,TSTART,TEND,TSTEP,POSCAR1.NumberOfAllAtoms);
            [g1length,g2length,g3length]=POSCAR1.ReciprocalLatticeLengthsFromPOSCAR;
            TransformUcart=UcartWorker(POSCAR1.POSCARVector,g1length,g2length,g3length,ADPMatrix.UcartReader,TSTART,TEND,TSTEP,obj.NumberOfAllAtoms);
            obj.TransformUcart=TransformUcart;
            [obj.a, obj.b, obj.c, obj.alphaInDegrees,obj.betaInDegrees,obj.gammaInDegrees]=POSCAR1.LatticeLengthsAndAngles;
           % disp('Have you created the "thermal_displacment_matrices.yaml" with the POSCAR you used here? Make sure about that in order to get correct results, please!')
            
        end
        
        
        function cifwrite(obj,Outputfilename)
            %writes a cif with the Ucif
            
            UcifOutput=obj.TransformUcart.Ucif;
            fidout = fopen(Outputfilename,'w');
            
            %Writes the information about the structure in a file
            
            TAnzahl=1;
            for T=obj.TSTART:obj.TSTEP:obj.TEND
                fprintf(fidout,'data_%s-%iK\n\n',Outputfilename,T);
                fprintf(fidout,'_audit_creation_method ''generated by %s'' \n', obj.NameOfProgram );
               
                
                fprintf(fidout,'_chemical_formula_sum\n');
                fprintf(fidout,'''');
                for i=1:obj.AtomTypes
                    
                    if i==obj.AtomTypes
                        
                        fprintf(fidout,'%s%i',obj.Atomnames{i},obj.NumberofAtomsperType(i));
                    else
                        fprintf(fidout,'%s%i ',obj.Atomnames{i},obj.NumberofAtomsperType(i));
                    end
                end
                fprintf(fidout,'''\n\n');
                
                fprintf(fidout,'_cell_length_a %f \n',obj.a);
                fprintf(fidout,'_cell_length_b %f \n',obj.b);
                fprintf(fidout,'_cell_length_c %f \n',obj.c);
                fprintf(fidout,'_cell_angle_alpha %f \n',obj.alphaInDegrees);
                fprintf(fidout,'_cell_angle_beta %f\n',obj.betaInDegrees);
                fprintf(fidout,'_cell_angle_gamma %f\n\n',obj.gammaInDegrees);
                fprintf(fidout,'_symmetry_space_group_name_H-M  ''P1''\n\n ');
                fprintf(fidout,'loop_\n');
                fprintf(fidout,'_atom_site_type_symbol \n_atom_site_label \n_atom_site_fract_x \n_atom_site_fract_y \n_atom_site_fract_z\n');
                
                AtomCounter=1;
                for i=1:obj.AtomTypes
                    for j=1:obj.NumberofAtomsperType(i)
                        fprintf(fidout,'%s %s%i %f %f %f\n', obj.Atomnames{i}, obj.Atomnames{i},j,obj.Coord(AtomCounter,1),obj.Coord(AtomCounter,2),obj.Coord(AtomCounter,3));
                        AtomCounter=AtomCounter+1;
                    end
                    
                    
                end
                
                %writes Ucif into the cif-file
                
                fprintf(fidout,'loop_\n_atom_site_aniso_label\n_atom_site_aniso_U_11\n_atom_site_aniso_U_22\n_atom_site_aniso_U_33\n_atom_site_aniso_U_23\n_atom_site_aniso_U_13\n_atom_site_aniso_U_12\n');
                
                fprintf(fidout,'# Additional Data for U_Aniso: %f\n',T);
                
                AtomCounter=1;
                for i=1:obj.AtomTypes
                    for j=1:obj.NumberofAtomsperType(i)
                        fprintf(fidout,'%s%i %f %f %f %f %f %f\n',  obj.Atomnames{i},j,UcifOutput(1,1,AtomCounter,TAnzahl),UcifOutput(2,2,AtomCounter,TAnzahl),UcifOutput(3,3,AtomCounter,TAnzahl),UcifOutput(2,3,AtomCounter,TAnzahl),UcifOutput(1,3,AtomCounter,TAnzahl),UcifOutput(1,2,AtomCounter,TAnzahl));
                        AtomCounter=AtomCounter+1;
                    end
                end
                
                
                fprintf(fidout,'#end of data_%s_%iK\n\n',Outputfilename,T);
                TAnzahl=TAnzahl+1;
            end
            fclose(fidout);
            
        end
        
       
        function cifwriteWithBs(obj,Outputfilename)
            %Writes a cif with Bs
            
            BcifOutput=obj.TransformUcart.Bcif;
            
            fidout = fopen(Outputfilename,'w');
            
            
            TAnzahl=1;
            for T=obj.TSTART:obj.TSTEP:obj.TEND
                fprintf(fidout,'data_%s_%iK\n\n',Outputfilename,T);
                fprintf(fidout,'_audit_creation_method ''generated by %s'' \n', obj.NameOfProgram );  
                fprintf(fidout,'_chemical_formula_sum\n');
                fprintf(fidout,'''');
                for i=1:obj.AtomTypes
                    
                    if i==obj.AtomTypes
                        
                        fprintf(fidout,'%s%i',obj.Atomnames{i},obj.NumberofAtomsperType(i));
                    else
                        fprintf(fidout,'%s%i ',obj.Atomnames{i},obj.NumberofAtomsperType(i));
                    end
                end
                fprintf(fidout,'''\n\n');
                
                fprintf(fidout,'_cell_length_a %f \n',obj.a);
                fprintf(fidout,'_cell_length_b %f \n',obj.b);
                fprintf(fidout,'_cell_length_c %f \n',obj.c);
                fprintf(fidout,'_cell_angle_alpha %f \n',obj.alphaInDegrees);
                fprintf(fidout,'_cell_angle_beta %f\n',obj.betaInDegrees);
                fprintf(fidout,'_cell_angle_gamma %f\n\n',obj.gammaInDegrees);
                fprintf(fidout,'_symmetry_space_group_name_H-M  ''P1''\n\n ');
                fprintf(fidout,'loop_\n');
                fprintf(fidout,'_atom_site_type_symbol \n_atom_site_label \n_atom_site_fract_x \n_atom_site_fract_y \n_atom_site_fract_z\n');
                
                AtomCounter=1;
                for i=1:obj.AtomTypes
                    for j=1:obj.NumberofAtomsperType(i)
                        fprintf(fidout,'%s %s%i %f %f %f\n', obj.Atomnames{i}, obj.Atomnames{i},j,obj.Coord(AtomCounter,1),obj.Coord(AtomCounter,2),obj.Coord(AtomCounter,3));
                        AtomCounter=AtomCounter+1;
                    end
                    
                    
                end
                
                fprintf(fidout,'loop_\n_atom_site_aniso_label\n_atom_site_aniso_B_11\n_atom_site_aniso_B_22\n_atom_site_aniso_B_33\n_atom_site_aniso_B_23\n_atom_site_aniso_B_13\n_atom_site_aniso_B_12\n');
                
                fprintf(fidout,'# Additional Data for B_Aniso: %f\n',T);
                
                AtomCounter=1;
                for i=1:obj.AtomTypes
                    for j=1:obj.NumberofAtomsperType(i)
                        fprintf(fidout,'%s%i %f %f %f %f %f %f\n',  obj.Atomnames{i},j,BcifOutput(1,1,AtomCounter,TAnzahl),BcifOutput(2,2,AtomCounter,TAnzahl),BcifOutput(3,3,AtomCounter,TAnzahl),BcifOutput(2,3,AtomCounter,TAnzahl),BcifOutput(1,3,AtomCounter,TAnzahl),BcifOutput(1,2,AtomCounter,TAnzahl));
                        AtomCounter=AtomCounter+1;
                    end
                end
                
                
                fprintf(fidout,'#end of data_%s_%iK\n\n',Outputfilename,T);
                TAnzahl=TAnzahl+1;
            end
            fclose(fidout);
            
        end
        
        
%         function writeOneTemperatureU1U2U3(obj,Outputfilename,TRequired)
%                       
%             fidout2 = fopen(Outputfilename,'w');
%             
%             e=obj.TransformUcart.U1U2U3ForASpecifiedT(TRequired);
%             
%             
%             
%             AtomCounter=1;
%             for i=1:obj.AtomTypes
%                 for j=1:obj.NumberofAtomsperType(i)
%                     
%                     fprintf(fidout2,'%s%i %f %f %f\n', obj.Atomnames{i},j,e(1,AtomCounter),e(2,AtomCounter),e(3,AtomCounter));
%                     AtomCounter=AtomCounter+1;
%                 end
%             end
%             
%             fclose(fidout2);
%         end
        
        function writeU1U2U3inFile(obj,Outputfilename)
            
            %writes U1, U2, U3 in File
                       
            fidout2 = fopen(Outputfilename,'w');
            obj.writeHeader(fidout2)  
            
            e=obj.TransformUcart.U1U2U3;
            TAnzahl=1;
            for TRequired=obj.TSTART:obj.TSTEP:obj.TEND
                fprintf(fidout2,'%i K\n', TRequired);
                fprintf(fidout2,'U_1 U_2 U_3\n');
                AtomCounter=1;
                for i=1:obj.AtomTypes
                    for j=1:obj.NumberofAtomsperType(i)
                        
                        fprintf(fidout2,'%s%i %e %e %e\n', obj.Atomnames{i},j,e(1,AtomCounter,TAnzahl),e(2,AtomCounter,TAnzahl),e(3,AtomCounter,TAnzahl));
                        AtomCounter=AtomCounter+1;
                    end
                end
               % fprintf(fidout2,'\n');
                TAnzahl=TAnzahl+1;
                
            end
            
            fclose(fidout2);
            
            
        end
        
         function writeUstarinFile(obj,Outputfilename)
             %writes Ustar in File
          
            fidout = fopen(Outputfilename,'w');
            obj.writeHeader(fidout)
            
            UstarOutput=obj.TransformUcart.Ustar;
            TAnzahl=1;
            for T=obj.TSTART:obj.TSTEP:obj.TEND
                fprintf(fidout,'%i K\n',T);
                
                
                fprintf(fidout,'U*_11 U*_22 U*_33 U*_23 U*_13 U*_12\n');
                
                              
                AtomCounter=1;
                for i=1:obj.AtomTypes
                    for j=1:obj.NumberofAtomsperType(i)
                        fprintf(fidout,'%s%i %e %e %e %e %e %e\n',  obj.Atomnames{i},j,UstarOutput(1,1,AtomCounter,TAnzahl),UstarOutput(2,2,AtomCounter,TAnzahl),UstarOutput(3,3,AtomCounter,TAnzahl),UstarOutput(2,3,AtomCounter,TAnzahl),UstarOutput(1,3,AtomCounter,TAnzahl),UstarOutput(1,2,AtomCounter,TAnzahl));
                        AtomCounter=AtomCounter+1;
                    end
                end
                
                
                fprintf(fidout,'\n');
                TAnzahl=TAnzahl+1;
            end
            fclose(fidout);
            
         end
       
        function writeBetasinFile(obj,Outputfilename)
            %writes Betas in File
          
          
            fidout = fopen(Outputfilename,'w');
            obj.writeHeader(fidout)
          
            BetasOutput=obj.TransformUcart.Betas;
            TAnzahl=1;
            for T=obj.TSTART:obj.TSTEP:obj.TEND
                fprintf(fidout,'%i K\n',T);
                
                
                fprintf(fidout,'beta_11 beta_22 beta_33 beta_23 beta_13 beta_12\n');
                
                              
                AtomCounter=1;
                for i=1:obj.AtomTypes
                    for j=1:obj.NumberofAtomsperType(i)
                        fprintf(fidout,'%s%i %e %e %e %e %e %e\n',  obj.Atomnames{i},j,BetasOutput(1,1,AtomCounter,TAnzahl),BetasOutput(2,2,AtomCounter,TAnzahl),BetasOutput(3,3,AtomCounter,TAnzahl),BetasOutput(2,3,AtomCounter,TAnzahl),BetasOutput(1,3,AtomCounter,TAnzahl),BetasOutput(1,2,AtomCounter,TAnzahl));
                        AtomCounter=AtomCounter+1;
                    end
                end
                
                
                fprintf(fidout,'\n');
                TAnzahl=TAnzahl+1;
            end
            fclose(fidout);
            
        end
        
        function writeUeqinFile(obj,Outputfilename)
            %writes Ueq in File
            
            
            fidout = fopen(Outputfilename,'w');
            
            obj.writeHeader(fidout)
            
            UeqOutput=obj.TransformUcart.Ueq;
            TAnzahl=1;
            for T=obj.TSTART:obj.TSTEP:obj.TEND
                fprintf(fidout,'%i K\n',T);
                
                
                fprintf(fidout,'U_eq\n');
                
                              
                AtomCounter=1;
                for i=1:obj.AtomTypes
                    for j=1:obj.NumberofAtomsperType(i)
                        fprintf(fidout,'%s%i %e \n',  obj.Atomnames{i},j,UeqOutput(1,AtomCounter,TAnzahl));
                        AtomCounter=AtomCounter+1;
                    end
                end
                
                
                fprintf(fidout,'\n');
                TAnzahl=TAnzahl+1;
            end
            fclose(fidout);
            
         end
        
        
    end
    
    
    
end

